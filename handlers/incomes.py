"""
File with income control handlers.
"""
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton

from server import bot
from database import get_gsheet_id
from keyboards import list_items_keyboard, main_keyboard
from utils import auth

from google_sheet.categories import get_categories, service_account
from google_sheet.accounts import get_accounts
from google_sheet.incomes import get_total_incomes, add_income


class AddsIncome(StatesGroup):
    amount = State()
    category = State()
    account = State()
    comment = State()


@auth
async def add_income_handler(message: types.Message, state: FSMContext):
    """Adds income to user's Google sheet."""
    await message.answer(
        "*–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞*\n\n–ù–∞–ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø–æ–ª—É—á–∏–ª\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞–ø–∏—à–∏ *–æ—Ç–º–µ–Ω–∞*.",
        parse_mode="Markdown",
    )
    await AddsIncome.amount.set()

    gsheet_id = get_gsheet_id(message.from_user.id)
    sheet = service_account.open_by_key(gsheet_id)

    settings_worksheet = sheet.worksheet("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    transactions_worksheet = sheet.worksheet("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

    async with state.proxy() as data:
        data["gsheet_id"] = gsheet_id
        data["categories"] = get_categories(worksheet=settings_worksheet)["income"]
        data["account_names"], data["accounts"] = get_accounts(worksheet=settings_worksheet)
        data["total_incomes"] = get_total_incomes(transactions_worksheet)


async def get_amount_handler(message: types.Message, state: FSMContext):
    """Gets amount from user."""
    amount = message.text
    try:
        amount = float(amount)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
    else:
        async with state.proxy() as data:
            data["amount"] = amount
            categories = data["categories"]

        if len(categories) == 0:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤.\n"
                "–ß—Ç–æ–±—ã –µ–µ –¥–æ–±–∞–≤–∏—Ç—å, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /add_category"
            )
            await state.finish()

        else:
            await message.answer(
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ —Ç–≤–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.\n\n",
                reply_markup=list_items_keyboard(sorted(categories)),
            )
            await AddsIncome.category.set()


async def get_category_handler(message: types.Message, state: FSMContext):
    """Gets category type from user."""
    category = message.text

    async with state.proxy() as data:
        categories = data["categories"]

    if category.lower() not in map(lambda word: word.lower(), categories):
        await message.answer(
            "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–µ –µ—â–µ —Ä–∞–∑!",
            reply_markup=list_items_keyboard(sorted(categories)),
        )

    else:
        async with state.proxy() as data:
            data["category"] = category
            account_names = data["account_names"]

        if len(account_names) == 0:
            await message.answer("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–ª –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞! –ß—Ç–æ–±—ã –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å, –≤–≤–µ–¥–∏ /add_account")
            await state.finish()

        else:
            await message.answer(
                "–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å—á–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏.",
                reply_markup=list_items_keyboard(sorted(account_names))
            )
            await AddsIncome.account.set()


async def get_account_handler(message: types.Message, state: FSMContext):
    """Gets user's account name."""
    account = message.text

    async with state.proxy() as data:
        account_names = data["account_names"]

    if account.lower() not in map(lambda word: word.lower(), account_names):
        await message.answer(
            "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑!",
            reply_markup=list_items_keyboard(account_names)
        )

    else:
        async with state.proxy() as data:
            data["account"] = account

        await AddsIncome.comment.set()

        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="finish_income"))

        await message.answer(
            "–û–∫! –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥—É."
            "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ. –ï—Å–ª–∏ —Ç—ã "
            "–Ω–µ —Ö–æ—á–µ—à—å –µ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å*.",
            parse_mode="Markdown",
            reply_markup=markup,
        )


async def save_income_to_sheet(user_id: int, state: FSMContext, comment: str = ""):
    """
    Saves income data to user's Google sheet.

    :param user_id: Telegram ID of the user.
    :param state: FSMContext object.
    :param comment: Description to income.
    """
    async with state.proxy() as data:
        add_income(
            data["amount"],
            data["category"],
            data["account"],
            comment,
            total_incomes=data["total_incomes"],
            gsheet_id=data["gsheet_id"],
        )

    await state.finish()
    await bot.send_message(
        user_id,
        "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à—É Goolge —Ç–∞–±–ª–∏—Ü—É!",
        reply_markup=main_keyboard(),
    )


async def cancel_comment_callback(call_query: types.CallbackQuery, state: FSMContext):
    """Saves income data to Google sheet."""
    await save_income_to_sheet(call_query.from_user.id, state)


async def get_comment_handler(message: types.Message, state: FSMContext):
    """Gets user's comment and saves income data to Google sheet."""
    await save_income_to_sheet(message.from_user.id, state, message.text)


async def cancel_adding_income_handler(message: types.Message, state: FSMContext):
    """Breaks the adding income process."""
    await state.finish()
    await message.answer(
        "*–û—Ç–º–µ–Ω–∞*\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤! üíµ",
        parse_mode="Markdown",
        reply_markup=main_keyboard(),
    )


def register_incomes_handlers(dp: Dispatcher):
    """Registers all handlers related to adding an expence"""
    dp.register_message_handler(
        cancel_adding_income_handler,
        lambda msg: msg.text.lower().startswith("–æ—Ç–º–µ–Ω–∞"),
        state="*",
    )

    dp.register_message_handler(
        add_income_handler,
        lambda msg: msg.text.lower().startswith("–¥–æ—Ö–æ–¥"),
        state="*",
    )
    dp.register_message_handler(
        add_income_handler,
        commands=["add_income"],
        state="*",
    )
    dp.register_message_handler(
        get_category_handler,
        state=AddsIncome.category,
    )
    dp.register_message_handler(
        get_amount_handler,
        state=AddsIncome.amount,
    )
    dp.register_message_handler(
        get_account_handler,
        state=AddsIncome.account,
    )
    dp.register_message_handler(
        get_comment_handler,
        state=AddsIncome.comment,
    )
    dp.register_callback_query_handler(
        cancel_comment_callback,
        lambda cb: cb.data and cb.data == "finish_income",
        state=AddsIncome.comment,
    )

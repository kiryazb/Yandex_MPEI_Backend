import logging

from random import choice

from aiogram import Dispatcher, executor, Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TELEGRAM_TOKEN
from keyboards import register_keyboard
from middleware import LoggingMiddleware


bot = Bot(TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s][%(name)s][%(levelname)s] %(message)s",
    datefmt="%d-%b-%y %H:%M:%S",
)


@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    """Handler called when user send /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! ü§†\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤/–¥–æ—Ö–æ–¥–æ–≤üí∞\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –≤ Google —Ç–∞–±–ª–∏—Ü–∞—Ö, "
        "–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É —Ç–µ–±—è –Ω–∞ Google –¥–∏—Å–∫–µ –∏ —Ç—ã "
        "–≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –∏–º–µ—Ç—å –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª Google Sheet –∏ "
        "–ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è –∫ –Ω–µ–º—É.\n"
        "–ü–æ—ç—Ç–æ–º—É —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π /register –∏ –±—É–¥–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å!",
        reply_markup=register_keyboard()
    )


async def autoresponder_handler(message: types.Message):
    """Send response to any message not covered by other handlers."""
    gnomes = ['–§–∏–ª–∏', '–ö–∏–ª–∏', '–û–∏–Ω', '–ì–ª–æ–∏–Ω', '–î–≤–∞–ª–∏–Ω', '–ë–∞–ª–∏–Ω', '–ë–∏—Ñ—É—Ä',
              '–ë–æ—Ñ—É—Ä', '–ë–æ–º–±—É—Ä', '–î–æ—Ä–∏', '–ù–æ—Ä–∏', '–û—Ä–∏', '–¢–æ—Ä–∏–Ω']
    await message.answer(f"{choice(gnomes).title()} –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!")


if __name__ == '__main__':
    from handlers.registration import register_registration_handlers
    from handlers.expenses import register_expences_handlers
    from handlers.incomes import register_incomes_handlers
    from handlers.settings.settings import register_settings_handlers

    dp.middleware.setup(LoggingMiddleware())

    register_registration_handlers(dp)
    register_settings_handlers(dp)
    register_expences_handlers(dp)
    register_incomes_handlers(dp)

    dp.register_message_handler(autoresponder_handler)

    executor.start_polling(dp, skip_updates=True)

